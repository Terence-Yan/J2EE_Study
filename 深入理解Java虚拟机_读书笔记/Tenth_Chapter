1.java语言“编译期”的含义是什么？
A(nswer)：java语言的“编译期”其实是一段“不确定”的操作过程，因为它可能是指一个前端编译器(其实叫“编译器的前端”更准确一些)把 *.java 文件
转换成 *.class 文件的过程；也可能是指虚拟机的后端运行期编译器(JIT编译器，Just In Time Compiler)把字节码转换成机器码的过程；还可能是
指使用静态提前编译器(AOT编译器，Ahead Of Time Compiler)直接把 *.java 文件编译成本地机器码的过程。
  下面列举了这3类编译过程中一些比较有代表性的编译器：
  (1).前端编译器：Sun 的 Javac、Eclipse JDT 中的增量式编译器(ECJ);
  (2).JIT编译器：HotSpot VM 的 C1、C2 编译器；
  (3).AOT编译器：GUN Compiler for the Java(GCJ)、Excelior JET。

注：一下文字中提到“编译期”和“编译器”都仅限于第一类编译过程
2.Javac编译器对代码的运行效率是否有优化？
A：限制了编译范围后，对于“优化”二字的定义就需要宽松一些，因为 Javac 这类编译器对代码的运行效率几乎没有任何优化措施(在 JDK 1.3 之后，Javac 
的 -O 优化参数就不再有意义)。

3.为何把对性能的优化集中到了后端的即时编译器中？
A：虚拟机设计团队把对性能的优化集中到了后端的即时编译器中，这样可以让那些不是由 Javac 产生的 class 文件(如JRuby、Groovy等语言的 class 文件)
也同样能享受到编译器优化所带来的好处。

4.Javac 编译器对 Java 语言有哪些其他的优化措施？
A：Javac 做了许多针对 Java 语言编码过程的优化措施来改善程序员的编码风格和提高编码效率。相当多新生的 Java 语法特性，都是靠编译器的“语法糖”来实现，
而不是依赖虚拟机的底层改进来支持，可以说，Java 中即时编译器在运行期的优化过程对于程序运行来说更重要，而前端编译器在编译期的优化过程对于程序编码来说
关系更加密切。

5.Java 虚拟机规范中是否对编译过程进行了定义？
A：虚拟机规范严格定义了 Class 文件的格式，但是《Java 虚拟机规范(第2版)》中，虽然有专门的一章“Compiling for the Java Virtual Machine”，但
都是以举例的形式描述，并没有对如何把 Java 源码文件转变为 Class 文件的编译过程进行十分严格的定义，这导致 Class 文件编译在某种程度上是与具体 JDK
实现相关的，在一些极端情况下，可能出现一段代码 Javac 编译器可以编译，但是 ECJ 编译器就不可以编译的问题。

6.编译过程大致分为哪几个阶段？
A：从 Sun Javac 的代码来看，编译过程大致可以分为3个过程，分别是：(1).解析与填充符号表过程；(2).插入式注解处理器的注解处理过程；(3).分析与字节码
生成过程。其中，过程(1)与(2)可“循环”执行。

7.解析步骤包括了经典程序编译原理中的词法分析与语法分析。

8.什么是词法分析？
A：词法分析是将源代码的字符流转变为标记(Token)集合，单个字符是程序编写过程的最小元素，而标记则是编译过程的最小元素，关键字、变量名、字面量、运算符
都可以成为标记，如“int a=b+2”这行代码包含了6个标记，分别是int、a、=、b、+、2，虽然关键字int由3个字符构成，但它只是一个Token，不可再拆分。

9.什么是语法分析？
A：语法分析是根据Token 序列构造抽象语法树的过程，抽象语法树(Abstract Syntax Tree, AST)是一种用来描述程序代码语法结构的树形表示方式，语法树的
每一个节点都代表着程序代码中的一个语法结构(construct)，例如包、类型、修饰符、运算符、接口、返回值甚至代码注释等都可以是一个语法结构。在 Javac
源码中，语法分析过程由com.sun.tools.javac.parser.Parser 类实现，这个阶段产出的抽象语法树由com.sun.tools.javac.tree.JCTree 类表示，经过
这个步骤之后，编译器就基本不会再对源码文件进行操作了，后续的操作都是建立在抽象语法树之上。
















